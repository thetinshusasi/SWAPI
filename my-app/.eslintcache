[{"D:\\Code\\TestCode\\Node\\my-app\\src\\App.tsx":"1","D:\\Code\\TestCode\\Node\\my-app\\src\\helpers\\utils.ts":"2","D:\\Code\\TestCode\\Node\\my-app\\src\\service\\baseService.ts":"3","D:\\Code\\TestCode\\Node\\my-app\\src\\components\\toDoList\\index.tsx":"4","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\index.tsx":"5","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\pages\\Home.tsx":"6","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\service\\baseService.ts":"7","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\App.tsx":"8","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\header\\index.tsx":"9","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\searchBar\\index.tsx":"10","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\reportWebVitals.ts":"11","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\service\\swAPI.service.ts":"12","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\cardBack\\index.tsx":"13","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\Providers\\hooks\\useGetById.tsx":"14","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\card\\index.tsx":"15","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\Providers\\swAPIProvider.tsx":"16","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\awaitLoading\\index.tsx":"17","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\helpers\\utils.ts":"18","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\cardFront\\index.tsx":"19"},{"size":483,"mtime":1612211879801,"results":"20","hashOfConfig":"21"},{"size":470,"mtime":1612212757832,"results":"22","hashOfConfig":"21"},{"size":583,"mtime":1612213439518,"results":"23","hashOfConfig":"21"},{"size":2368,"mtime":1612222761224,"results":"24","hashOfConfig":"21"},{"size":594,"mtime":1614408251029,"results":"25","hashOfConfig":"26"},{"size":2213,"mtime":1614538885724,"results":"27","hashOfConfig":"26"},{"size":644,"mtime":1614456567061,"results":"28","hashOfConfig":"26"},{"size":649,"mtime":1614455860411,"results":"29","hashOfConfig":"26"},{"size":476,"mtime":1614539098615,"results":"30","hashOfConfig":"26"},{"size":1321,"mtime":1614466497474,"results":"31","hashOfConfig":"26"},{"size":425,"mtime":1612111384985,"results":"32","hashOfConfig":"26"},{"size":682,"mtime":1614457161289,"results":"33","hashOfConfig":"26"},{"size":3534,"mtime":1614537903459,"results":"34","hashOfConfig":"26"},{"size":984,"mtime":1614465209599,"results":"35","hashOfConfig":"26"},{"size":1509,"mtime":1614538046764,"results":"36","hashOfConfig":"26"},{"size":1822,"mtime":1614461283922,"results":"37","hashOfConfig":"26"},{"size":881,"mtime":1612207199071,"results":"38","hashOfConfig":"26"},{"size":657,"mtime":1614532091644,"results":"39","hashOfConfig":"26"},{"size":605,"mtime":1614537427912,"results":"40","hashOfConfig":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18p1orn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"nx50js",{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Code\\TestCode\\Node\\my-app\\src\\App.tsx",[],"D:\\Code\\TestCode\\Node\\my-app\\src\\helpers\\utils.ts",[],"D:\\Code\\TestCode\\Node\\my-app\\src\\service\\baseService.ts",[],"D:\\Code\\TestCode\\Node\\my-app\\src\\components\\toDoList\\index.tsx",["88","89"],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\index.tsx",[],["90","91"],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\pages\\Home.tsx",["92","93","94"],"import React, { useContext, useEffect, useState, useCallback } from \"react\";\r\nimport { Col, Container, Row, Accordion } from \"react-bootstrap\";\r\nimport Card from \"../components/card\";\r\nimport SearchBar from \"../components/searchBar\";\r\nimport Option from \"../components/interfaces/Option\";\r\nimport \"./index.scss\";\r\nimport AwaitLoading from \"../components/awaitLoading\";\r\nimport { SWAPIContext } from \"../Providers/swAPIProvider\";\r\nimport { getOptionsFromSwNames } from \"../helpers/utils\";\r\nexport interface IHomeProps {}\r\nconst imagesFolderPathPrefix = `/swCharacters`;\r\nexport default function Home(props: IHomeProps) {\r\n  const {\r\n    namesLoading,\r\n    namesError,\r\n    names,\r\n    getSWNames,\r\n    personLoading,\r\n    personError,\r\n    person,\r\n    getSWByID,\r\n  } = useContext(SWAPIContext);\r\n  const [id, setId] = useState(undefined);\r\n\r\n  const [options, setOptions] = useState(\r\n    (names && getOptionsFromSwNames(names)) || undefined\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!names) getSWNames && getSWNames();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOptions((names && getOptionsFromSwNames(names)) || undefined);\r\n  }, [names]);\r\n\r\n  const onSelectHandler = (selectedItem: Option) => {\r\n    if (!selectedItem) return;\r\n    setId(selectedItem.value);\r\n    getSWByID && getSWByID(`${selectedItem.value}`);\r\n  };\r\n\r\n  const searchBarTag =\r\n    (options && (\r\n      <SearchBar\r\n        placeholder=\"Please search by name or id\"\r\n        options={options}\r\n        onChange={onSelectHandler}\r\n      />\r\n    )) ||\r\n    null;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container fluid className=\"homeContainer\">\r\n        <Row>\r\n          <Col xs={{ span: 8, offset: 2 }} className=\"center\">\r\n            <AwaitLoading loading={namesLoading} error={namesError}>\r\n              {searchBarTag}\r\n            </AwaitLoading>\r\n          </Col>\r\n        </Row>\r\n        <AwaitLoading loading={personLoading} error={personError}>\r\n          {person && (\r\n            <Row>\r\n              <Col xs={12}>\r\n                <Card src={`${imagesFolderPathPrefix}/${id}.jpg`} {...person} />\r\n              </Col>\r\n            </Row>\r\n          )}\r\n        </AwaitLoading>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\service\\baseService.ts",[],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\App.tsx",[],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\header\\index.tsx",["95"],"import React, { ReactElement } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport \"./index.scss\";\r\nimport avatar from \"../../assets/images/avatar.png\";\r\ninterface Props {}\r\n\r\nexport default function Header({}: Props): ReactElement {\r\n  return (\r\n    <div className=\"headerContainer\">\r\n      <Row>\r\n        <Col xs={12} className=\"title\">\r\n          <img src={avatar} alt=\"header\" width={250} height={250} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\searchBar\\index.tsx",["96","97"],"import \"./index.scss\";\r\n\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport { Col, Form, ListGroup, Row } from \"react-bootstrap\";\r\nimport Option from \"../interfaces/Option\";\r\nimport Select from \"react-select\";\r\nimport { ValueType } from \"react-select/lib/types\";\r\n\r\ninterface SearchBarProps {\r\n  placeholder?: string;\r\n  value?: Option;\r\n  options: Option[];\r\n  onChange?: (option: Option) => void;\r\n}\r\n\r\nexport default function SearchBar({\r\n  value,\r\n  options,\r\n  placeholder = \"Please select an option\",\r\n  onChange,\r\n}: SearchBarProps): ReactElement {\r\n  const [selected, setSelected] = useState(value || []);\r\n  const handleChange = (option: ValueType<Option>) => {\r\n    const val = option as Option;\r\n    console.log(val);\r\n    setSelected(val);\r\n    onChange && onChange(val);\r\n  };\r\n\r\n  return (\r\n    <Row className=\"searchBarContainer\">\r\n      <Col xs={12}>\r\n        <Select<Option>\r\n          value={selected}\r\n          placeholder={placeholder}\r\n          getOptionLabel={(option: Option) => option.label}\r\n          getOptionValue={(option: Option) => option.value}\r\n          options={options}\r\n          isClearable={true}\r\n          isSearchable={true}\r\n          backspaceRemovesValue={true}\r\n          onChange={handleChange}\r\n        />\r\n        Tinshu\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n",["98","99"],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\reportWebVitals.ts",[],["100","101"],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\service\\swAPI.service.ts",[],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\cardBack\\index.tsx",[],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\Providers\\hooks\\useGetById.tsx",["102"],"import React, { useState } from \"react\";\r\nimport IPerson from \"../../models/interfaces/IPerson\";\r\nexport interface useGetAllNameProps {\r\n  loading: boolean;\r\n  error: string;\r\n  person: IPerson[] | undefined;\r\n  getSWByID: (search?: string) => void;\r\n}\r\nconst useGetById = (getByIdServiceFunc: (id: string) => Promise<IPerson>) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(undefined);\r\n\r\n  const [person, setPerson] = useState<IPerson | undefined>(undefined);\r\n\r\n  const getSWByID = async (id: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const data: IPerson | undefined =\r\n        (getByIdServiceFunc && (await getByIdServiceFunc(id))) || undefined;\r\n      setPerson(data);\r\n      setLoading(false);\r\n    } catch (err: any) {\r\n      setLoading(false);\r\n      setError(error);\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    person,\r\n    getSWByID,\r\n  };\r\n};\r\n\r\nexport default useGetById;\r\n","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\card\\index.tsx",["103","104"],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\Providers\\swAPIProvider.tsx",["105","106","107","108","109","110"],"import { type } from \"os\";\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport IPerson from \"../models/interfaces/IPerson\";\r\nimport ISWOption from \"../models/interfaces/ISWOption\";\r\nimport { getAll, getAllNames, getById } from \"../service/swAPI.service\";\r\nimport useGetAllNames, { useGetAllNameProps } from \"./hooks/useGetAllNames\";\r\nimport useGetById from \"./hooks/useGetById\";\r\nexport interface SWAPIProviderProps {\r\n  children: React.ReactNode;\r\n}\r\nexport interface SWAPIProviderState {\r\n  namesLoading: boolean;\r\n  namesError: string | undefined;\r\n  names: ISWOption[] | undefined;\r\n  getSWNames: (search?: string) => void;\r\n  personLoading: boolean;\r\n  personError: string | undefined;\r\n  person: IPerson | undefined;\r\n  getSWByID: (id: string) => void;\r\n}\r\n\r\nexport type SWAPIProviderType = {\r\n  namesLoading?: boolean;\r\n  namesError?: string | undefined;\r\n  names?: ISWOption[] | undefined;\r\n  getSWNames?: (search?: string) => void;\r\n  personLoading?: boolean;\r\n  personError?: string | undefined;\r\n  person?: IPerson | undefined;\r\n  getSWByID?: (id: string) => void;\r\n};\r\nexport const SWAPIContext = React.createContext<SWAPIProviderType>({});\r\n\r\nconst SWAPIProvider = ({ children }: SWAPIProviderProps) => {\r\n  const {\r\n    loading: namesLoading,\r\n    error: namesError,\r\n    names,\r\n    getSWNames,\r\n  } = useGetAllNames(getAllNames);\r\n\r\n  const {\r\n    loading: personLoading,\r\n    error: personError,\r\n    person,\r\n    getSWByID,\r\n  } = useGetById(getById);\r\n\r\n  return (\r\n    <SWAPIContext.Provider\r\n      value={{\r\n        namesLoading,\r\n        namesError,\r\n        names,\r\n        getSWNames,\r\n        personLoading,\r\n        personError,\r\n        person,\r\n        getSWByID,\r\n      }}\r\n    >\r\n      {children}\r\n    </SWAPIContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SWAPIProvider;\r\n","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\awaitLoading\\index.tsx",["111"],"import React, { ReactElement } from \"react\";\r\nimport { Col, Row, Spinner } from \"react-bootstrap\";\r\nimport \"./index.scss\";\r\n\r\ninterface AwaitLoadingProps {\r\n  error?: string;\r\n  loading?: boolean;\r\n  children?: React.ReactNode;\r\n}\r\n\r\nexport default function AwaitLoading({\r\n  error,\r\n  loading,\r\n  children,\r\n}: AwaitLoadingProps) {\r\n  let content = (\r\n    <Row>\r\n      <Col xs={12} className=\"content\">\r\n        {children}\r\n      </Col>\r\n    </Row>\r\n  );\r\n\r\n  if (error) {\r\n    content = (\r\n      <Row>\r\n        <Col xs={12} className=\"spinnerContainer\">\r\n          {error}\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n  if (loading) {\r\n    content = (\r\n      <Row>\r\n        <Col xs={12} className=\"spinnerContainer\">\r\n          <Spinner animation=\"border\" variant=\"primary\" />\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{content}</React.Fragment>;\r\n}\r\n","D:\\Code\\TestCode\\RedSpace\\my-app\\src\\helpers\\utils.ts",[],"D:\\Code\\TestCode\\RedSpace\\my-app\\src\\components\\cardFront\\index.tsx",["112","113"],{"ruleId":"114","severity":1,"message":"115","line":4,"column":18,"nodeType":"116","messageId":"117","endLine":4,"endColumn":21},{"ruleId":"114","severity":1,"message":"118","line":4,"column":23,"nodeType":"116","messageId":"117","endLine":4,"endColumn":26},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"114","severity":1,"message":"123","line":1,"column":50,"nodeType":"116","messageId":"117","endLine":1,"endColumn":61},{"ruleId":"114","severity":1,"message":"124","line":2,"column":31,"nodeType":"116","messageId":"117","endLine":2,"endColumn":40},{"ruleId":"125","severity":1,"message":"126","line":31,"column":6,"nodeType":"127","endLine":31,"endColumn":8,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":7,"column":32,"nodeType":"131","messageId":"132","endLine":7,"endColumn":41},{"ruleId":"114","severity":1,"message":"133","line":4,"column":15,"nodeType":"116","messageId":"117","endLine":4,"endColumn":19},{"ruleId":"114","severity":1,"message":"134","line":4,"column":21,"nodeType":"116","messageId":"117","endLine":4,"endColumn":30},{"ruleId":"119","replacedBy":"135"},{"ruleId":"121","replacedBy":"136"},{"ruleId":"119","replacedBy":"137"},{"ruleId":"121","replacedBy":"138"},{"ruleId":"114","severity":1,"message":"139","line":1,"column":8,"nodeType":"116","messageId":"117","endLine":1,"endColumn":13},{"ruleId":"114","severity":1,"message":"140","line":2,"column":18,"nodeType":"116","messageId":"117","endLine":2,"endColumn":31},{"ruleId":"114","severity":1,"message":"141","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":29},{"ruleId":"114","severity":1,"message":"142","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":14},{"ruleId":"114","severity":1,"message":"143","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":26},{"ruleId":"114","severity":1,"message":"144","line":2,"column":28,"nodeType":"116","messageId":"117","endLine":2,"endColumn":36},{"ruleId":"114","severity":1,"message":"145","line":2,"column":38,"nodeType":"116","messageId":"117","endLine":2,"endColumn":48},{"ruleId":"114","severity":1,"message":"146","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"147","line":6,"column":26,"nodeType":"116","messageId":"117","endLine":6,"endColumn":44},{"ruleId":"114","severity":1,"message":"148","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":29},{"ruleId":"114","severity":1,"message":"115","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":13},{"ruleId":"114","severity":1,"message":"118","line":2,"column":15,"nodeType":"116","messageId":"117","endLine":2,"endColumn":18},"@typescript-eslint/no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","no-native-reassign",["149"],"no-negated-in-lhs",["150"],"'useCallback' is defined but never used.","'Accordion' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSWNames' and 'names'. Either include them or remove the dependency array.","ArrayExpression",["151"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Form' is defined but never used.","'ListGroup' is defined but never used.",["149"],["150"],["149"],["150"],"'React' is defined but never used.","'BootstrapCard' is defined but never used.","'removeInvalidValues' is defined but never used.","'type' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'getAll' is defined but never used.","'useGetAllNameProps' is defined but never used.","'ReactElement' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},"Update the dependencies array to be: [getSWNames, names]",{"range":"154","text":"155"},[1023,1025],"[getSWNames, names]"]